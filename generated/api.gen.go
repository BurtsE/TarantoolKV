// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package generated

import (
	"fmt"
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

const (
	ApiKeyAuthScopes = "ApiKeyAuth.Scopes"
)

// PostKvJSONBody defines parameters for PostKv.
type PostKvJSONBody struct {
	Key string `json:"key"`

	// Value Произвольный JSON-объект
	Value map[string]interface{} `json:"value"`
}

// PutKvIdJSONBody defines parameters for PutKvId.
type PutKvIdJSONBody struct {
	// Value Произвольный JSON-объект
	Value map[string]interface{} `json:"value"`
}

// PostKvJSONRequestBody defines body for PostKv for application/json ContentType.
type PostKvJSONRequestBody PostKvJSONBody

// PutKvIdJSONRequestBody defines body for PutKvId for application/json ContentType.
type PutKvIdJSONRequestBody PutKvIdJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Создать новую пару ключ-значение
	// (POST /kv)
	PostKv(c *gin.Context)
	// Удалить пару ключ-значение
	// (DELETE /kv/{id})
	DeleteKvId(c *gin.Context, id string)
	// Получить значение по ключу
	// (GET /kv/{id})
	GetKvId(c *gin.Context, id string)
	// Обновить значение по ключу
	// (PUT /kv/{id})
	PutKvId(c *gin.Context, id string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// PostKv operation middleware
func (siw *ServerInterfaceWrapper) PostKv(c *gin.Context) {

	c.Set(ApiKeyAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostKv(c)
}

// DeleteKvId operation middleware
func (siw *ServerInterfaceWrapper) DeleteKvId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteKvId(c, id)
}

// GetKvId operation middleware
func (siw *ServerInterfaceWrapper) GetKvId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetKvId(c, id)
}

// PutKvId operation middleware
func (siw *ServerInterfaceWrapper) PutKvId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutKvId(c, id)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/kv", wrapper.PostKv)
	router.DELETE(options.BaseURL+"/kv/:id", wrapper.DeleteKvId)
	router.GET(options.BaseURL+"/kv/:id", wrapper.GetKvId)
	router.PUT(options.BaseURL+"/kv/:id", wrapper.PutKvId)
}
